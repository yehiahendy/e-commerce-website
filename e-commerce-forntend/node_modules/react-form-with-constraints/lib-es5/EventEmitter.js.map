{"version":3,"file":"EventEmitter.js","sourceRoot":"","sources":["../src/EventEmitter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAkC;AAMlC;IAAA;QACE,cAAS,GAAG,IAAI,GAAG,EAAwD,CAAC;IA0D9E,CAAC;IAxDC,+BAAQ,GAAR,UAAS,SAAiB;QAAE,cAAqB;aAArB,UAAqB,EAArB,qBAAqB,EAArB,IAAqB;YAArB,6BAAqB;;QAC/C,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAC/C,IAAM,GAAG,GAAG,IAAI,KAAK,EAAsB,CAAC;QAC5C,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,GAAG,CAAC,IAAI,CAAC,QAAQ,eAAI,IAAI,CAAuB,CAAC,EAAjD,CAAiD,CAAC,CAAC;QACjF,OAAO,GAAG,CAAC;IACb,CAAC;IAEK,gCAAS,GAAf,UAAgB,SAAiB;QAAE,cAAqB;aAArB,UAAqB,EAArB,qBAAqB,EAArB,IAAqB;YAArB,6BAAqB;;;;;;;wBAChD,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;wBACzC,GAAG,GAAG,IAAI,KAAK,EAAsB,CAAC;wBACnC,CAAC,GAAG,CAAC;;;6BAAE,CAAA,CAAC,GAAG,SAAS,CAAC,MAAM,CAAA;wBAQlC,KAAA,CAAA,KAAA,GAAG,CAAA,CAAC,IAAI,CAAA;wBAAC,WAAM,SAAS,CAAC,CAAC,CAAC,OAAZ,SAAS,EAAO,IAAI,GAAC;;wBAApC,cAAS,SAA2B,EAAC,CAAC;;;wBARF,CAAC,EAAE,CAAA;;4BAUzC,WAAO,GAAG,EAAC;;;;KACZ;IAEO,mCAAY,GAApB,UAAqB,SAAiB;QACpC,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAKhD,IAAI,SAAS,KAAK,SAAS,EAAE;YAC3B,eAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,4BAA0B,SAAS,MAAG,CAAC,CAAC;YACrE,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,kCAAW,GAAX,UAAY,SAAiB,EAAE,QAAoD;QACjF,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;YAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QACtE,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAE,CAAC;QACjD,eAAM,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,uCAAqC,SAAS,MAAG,CAAC,CAAC;QACzF,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3B,CAAC;IAKD,qCAAc,GAAd,UAAe,SAAiB,EAAE,QAAoD;QACpF,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAChD,eAAM,CAAC,SAAS,KAAK,SAAS,EAAE,oBAAkB,SAAS,MAAG,CAAC,CAAC;QAEhE,IAAM,KAAK,GAAG,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC9C,eAAM,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,mCAAiC,SAAS,MAAG,CAAC,CAAC;QAClE,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAE3B,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC;YAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAC/D,CAAC;IACH,mBAAC;AAAD,CAAC,AA3DD,IA2DC;AA3DY,oCAAY","sourcesContent":["import { assert } from './assert';\n\n// FIXME [Proposal: Variadic Kinds -- Give specific types to variadic functions](https://github.com/Microsoft/TypeScript/issues/5453)\n\ntype Listener<Args extends any[], ReturnType> = (...args: Args) => ReturnType | Promise<ReturnType>;\n\nexport class EventEmitter<ListenerArgs extends any[], ListenerReturnType> {\n  listeners = new Map<string, Listener<ListenerArgs, ListenerReturnType>[]>();\n\n  emitSync(eventName: string, ...args: ListenerArgs) {\n    const listeners = this.getListeners(eventName);\n    const ret = new Array<ListenerReturnType>();\n    listeners.forEach(listener => ret.push(listener(...args) as ListenerReturnType));\n    return ret;\n  }\n\n  async emitAsync(eventName: string, ...args: ListenerArgs) {\n    const listeners = this.getListeners(eventName);\n    const ret = new Array<ListenerReturnType>();\n    for (let i = 0; i < listeners.length; i++) {\n      // Why await? Two cases:\n      // - listener does not return a Promise:\n      //   => await changes nothing: the next listener call happens when the current one is done\n      // - listener returns a Promise:\n      //   => wait for the listener call to finish (e.g listeners are executed in sequence),\n      //      without we would call each listener without waiting for their results\n      // eslint-disable-next-line no-await-in-loop\n      ret.push(await listeners[i](...args));\n    }\n    return ret;\n  }\n\n  private getListeners(eventName: string) {\n    const listeners = this.listeners.get(eventName);\n\n    // Assert disabled: an event can be emitted even without listeners\n    //assert(listeners !== undefined, `Unknown event '${eventName}'`);\n\n    if (listeners !== undefined) {\n      assert(listeners.length > 0, `No listener for event '${eventName}'`);\n      return listeners;\n    }\n    return [];\n  }\n\n  addListener(eventName: string, listener: Listener<ListenerArgs, ListenerReturnType>) {\n    if (!this.listeners.has(eventName)) this.listeners.set(eventName, []);\n    const listeners = this.listeners.get(eventName)!;\n    assert(!listeners.includes(listener), `Listener already added for event '${eventName}'`);\n    listeners.push(listener);\n  }\n\n  // [\"removeListener() will remove, at most, one instance of a listener from the listener array.\n  // If any single listener has been added multiple times to the listener array for the specified eventName,\n  // then removeListener() must be called multiple times to remove each instance.\"](https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener)\n  removeListener(eventName: string, listener: Listener<ListenerArgs, ListenerReturnType>) {\n    const listeners = this.listeners.get(eventName);\n    assert(listeners !== undefined, `Unknown event '${eventName}'`);\n\n    const index = listeners.lastIndexOf(listener);\n    assert(index > -1, `Listener not found for event '${eventName}'`);\n    listeners.splice(index, 1);\n\n    if (listeners.length === 0) this.listeners.delete(eventName);\n  }\n}\n"]}
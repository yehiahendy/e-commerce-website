"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Input = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var FormWithConstraints_1 = require("./FormWithConstraints");
var Input = (function (_super) {
    __extends(Input, _super);
    function Input() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            field: undefined
        };
        _this.fieldWillValidate = function (fieldName) {
            if (fieldName === _this.props.name) {
                _this.setState({ field: 'pending' });
            }
        };
        _this.fieldDidValidate = function (field) {
            if (field.name === _this.props.name) {
                _this.setState({ field: field });
            }
        };
        _this.fieldDidReset = function (field) {
            if (field.name === _this.props.name) {
                _this.setState({ field: undefined });
            }
        };
        return _this;
    }
    Input.prototype.componentDidMount = function () {
        this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);
        this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);
        this.context.form.addFieldDidResetEventListener(this.fieldDidReset);
    };
    Input.prototype.componentWillUnmount = function () {
        this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);
        this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);
        this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);
    };
    Input.prototype.fieldValidationStates = function () {
        var field = this.state.field;
        var states = [];
        if (field !== undefined) {
            if (field === 'pending') {
                states.push('isPending');
            }
            else {
                if (field.hasErrors())
                    states.push('hasErrors');
                if (field.hasWarnings())
                    states.push('hasWarnings');
                if (field.hasInfos())
                    states.push('hasInfos');
                if (field.isValid())
                    states.push('isValid');
            }
        }
        return states;
    };
    Input.prototype.render = function () {
        var _a = this.props, innerRef = _a.innerRef, className = _a.className, classes = _a.classes, inputProps = __rest(_a, ["innerRef", "className", "classes"]);
        var validationStates = this.fieldValidationStates();
        var classNames = className;
        validationStates.forEach(function (validationState) {
            var tmp = classes[validationState];
            if (tmp !== undefined) {
                if (classNames !== undefined) {
                    classNames += " " + tmp;
                }
                else {
                    classNames = tmp;
                }
            }
        });
        return React.createElement("input", __assign({ ref: innerRef }, inputProps, { className: classNames }));
    };
    Input.contextTypes = {
        form: PropTypes.instanceOf(FormWithConstraints_1.FormWithConstraints).isRequired
    };
    Input.defaultProps = {
        classes: {
            isPending: 'is-pending',
            hasErrors: 'has-errors',
            hasWarnings: 'has-warnings',
            hasInfos: 'has-infos',
            isValid: 'is-valid'
        }
    };
    return Input;
}(React.Component));
exports.Input = Input;
//# sourceMappingURL=Input.js.map
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormWithConstraints = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var assert_1 = require("./assert");
var FieldsStore_1 = require("./FieldsStore");
var InputElement_1 = require("./InputElement");
var notUndefined_1 = require("./notUndefined");
var withFieldDidResetEventEmitter_1 = require("./withFieldDidResetEventEmitter");
var withFieldDidValidateEventEmitter_1 = require("./withFieldDidValidateEventEmitter");
var withFieldWillValidateEventEmitter_1 = require("./withFieldWillValidateEventEmitter");
var withValidateFieldEventEmitter_1 = require("./withValidateFieldEventEmitter");
var FormWithConstraintsComponent = (function (_super) {
    __extends(FormWithConstraintsComponent, _super);
    function FormWithConstraintsComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FormWithConstraintsComponent;
}(React.PureComponent));
var FormWithConstraints = (function (_super) {
    __extends(FormWithConstraints, _super);
    function FormWithConstraints() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.form = null;
        _this.fieldsStore = new FieldsStore_1.FieldsStore();
        _this.fieldFeedbacksKeyCounter = 0;
        return _this;
    }
    FormWithConstraints.prototype.getChildContext = function () {
        return {
            form: this
        };
    };
    FormWithConstraints.prototype.computeFieldFeedbacksKey = function () {
        return "" + this.fieldFeedbacksKeyCounter++;
    };
    FormWithConstraints.prototype.validateFields = function () {
        var inputsOrNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            inputsOrNames[_i] = arguments[_i];
        }
        return this._validateFields.apply(this, __spreadArrays([true], inputsOrNames));
    };
    FormWithConstraints.prototype.validateForm = function () {
        return this.validateFieldsWithoutFeedback();
    };
    FormWithConstraints.prototype.validateFieldsWithoutFeedback = function () {
        var inputsOrNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            inputsOrNames[_i] = arguments[_i];
        }
        return this._validateFields.apply(this, __spreadArrays([false], inputsOrNames));
    };
    FormWithConstraints.prototype._validateFields = function (forceValidateFields) {
        var inputsOrNames = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            inputsOrNames[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var fields, inputs, i, input, field;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fields = new Array();
                        inputs = this.normalizeInputs.apply(this, inputsOrNames);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < inputs.length)) return [3, 4];
                        input = inputs[i];
                        return [4, this.validateField(forceValidateFields, new InputElement_1.InputElement(input), input)];
                    case 2:
                        field = _a.sent();
                        if (field !== undefined)
                            fields.push(field);
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [2, fields];
                }
            });
        });
    };
    FormWithConstraints.prototype.validateField = function (forceValidateFields, input, nativeInput) {
        return __awaiter(this, void 0, void 0, function () {
            var fieldName, field, arrayOfArrays;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fieldName = input.name;
                        field = this.fieldsStore.getField(fieldName);
                        if (!(field === undefined)) return [3, 1];
                        return [3, 3];
                    case 1:
                        if (!(forceValidateFields || !field.hasFeedbacks())) return [3, 3];
                        field.element = nativeInput;
                        field.clearValidations();
                        this.emitFieldWillValidateEvent(fieldName);
                        return [4, this.emitValidateFieldEvent(input)];
                    case 2:
                        arrayOfArrays = _a.sent();
                        assert_1.assert(JSON.stringify(arrayOfArrays.flat(Infinity).filter(function (fieldFeedback) { return notUndefined_1.notUndefined(fieldFeedback); })) ===
                            JSON.stringify(field.validations), "FieldsStore does not match emitValidateFieldEvent() result, did the user changed the input rapidly?");
                        this.emitFieldDidValidateEvent(field);
                        _a.label = 3;
                    case 3: return [2, field];
                }
            });
        });
    };
    FormWithConstraints.prototype.normalizeInputs = function () {
        var _this = this;
        var inputsOrNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            inputsOrNames[_i] = arguments[_i];
        }
        var inputs;
        if (inputsOrNames.length === 0) {
            inputs = Array.from(this.form.querySelectorAll('[name]'));
            inputs = inputs.filter(function (input) { return input.validity !== undefined; });
            inputs
                .filter(function (input) { return input.type !== 'checkbox' && input.type !== 'radio'; })
                .map(function (input) { return input.name; })
                .forEach(function (name, index, self) {
                if (self.indexOf(name) !== index) {
                    throw new Error("Multiple elements matching '[name=\"" + name + "\"]' inside the form");
                }
            });
        }
        else {
            inputs = inputsOrNames.map(function (input) {
                if (typeof input === 'string') {
                    var query = "[name=\"" + input + "\"]";
                    var elements = Array.from(_this.form.querySelectorAll(query));
                    if (elements.filter(function (el) { return el.validity === undefined; }).length > 0) {
                        throw new Error("'" + query + "' should match an <input>, <select> or <textarea>");
                    }
                    if (elements.filter(function (el) { return el.type !== 'checkbox' && el.type !== 'radio'; }).length > 1) {
                        throw new Error("Multiple elements matching '" + query + "' inside the form");
                    }
                    var element = elements[0];
                    if (element === undefined) {
                        throw new Error("Could not find field '" + query + "' inside the form");
                    }
                    return element;
                }
                return input;
            });
        }
        return inputs;
    };
    FormWithConstraints.prototype.isValid = function () {
        return this.fieldsStore.isValid();
    };
    FormWithConstraints.prototype.hasFeedbacks = function () {
        return this.fieldsStore.hasFeedbacks();
    };
    FormWithConstraints.prototype.reset = function () {
        return this.resetFields();
    };
    FormWithConstraints.prototype.resetFields = function () {
        var _this = this;
        var inputsOrNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            inputsOrNames[_i] = arguments[_i];
        }
        var fields = new Array();
        var inputs = this.normalizeInputs.apply(this, inputsOrNames);
        inputs.forEach(function (input) {
            var field = _this.resetField(new InputElement_1.InputElement(input));
            if (field !== undefined)
                fields.push(field);
        });
        return fields;
    };
    FormWithConstraints.prototype.resetField = function (input) {
        var fieldName = input.name;
        var field = this.fieldsStore.getField(fieldName);
        if (field === undefined) {
        }
        else {
            field.clearValidations();
            this.emitFieldDidResetEvent(field);
        }
        return field;
    };
    FormWithConstraints.prototype.render = function () {
        var _this = this;
        return React.createElement("form", __assign({ ref: function (form) { return (_this.form = form); } }, this.props));
    };
    FormWithConstraints.childContextTypes = {
        form: PropTypes.instanceOf(FormWithConstraints).isRequired
    };
    return FormWithConstraints;
}(withFieldDidResetEventEmitter_1.withFieldDidResetEventEmitter(withFieldWillValidateEventEmitter_1.withFieldWillValidateEventEmitter(withFieldDidValidateEventEmitter_1.withFieldDidValidateEventEmitter(withValidateFieldEventEmitter_1.withValidateFieldEventEmitter(FormWithConstraintsComponent))))));
exports.FormWithConstraints = FormWithConstraints;
//# sourceMappingURL=FormWithConstraints.js.map
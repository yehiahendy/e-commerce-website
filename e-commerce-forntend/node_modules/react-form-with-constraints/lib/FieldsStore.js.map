{"version":3,"file":"FieldsStore.js","sourceRoot":"","sources":["../src/FieldsStore.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAC9C,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,MAAM,CAAN,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,mCAAqB,CAAA;IACrB,uCAAyB,CAAA;AAC3B,CAAC,EAHW,UAAU,KAAV,UAAU,QAGrB;AAED,MAAM,OAAO,WAAY,SAAQ,YAAoC;IAArE;;QACW,WAAM,GAAG,IAAI,KAAK,EAAS,CAAC;IA+CvC,CAAC;IA7CC,QAAQ,CAAC,SAAiB;QACxB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC;QAEvE,OAAO,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACrD,CAAC;IAED,QAAQ,CAAC,SAAiB;QACxB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC;QACvE,MAAM,CACJ,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAC1C,2CAA2C,SAAS,GAAG,CACxD,CAAC;QAEF,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,MAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;YACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC3B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;SAC3C;aAAM;SAGN;IACH,CAAC;IAED,WAAW,CAAC,SAAiB;QAE3B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC;QAMvE,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;YACd,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;SAC9C;IACH,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACrD,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;IACzD,CAAC;CACF","sourcesContent":["import { assert } from './assert';\nimport { EventEmitter } from './EventEmitter';\nimport { Field } from './Field';\n\nexport enum FieldEvent {\n  Added = 'FIELD_ADDED',\n  Removed = 'FIELD_REMOVED'\n}\n\nexport class FieldsStore extends EventEmitter<[Field | string], void> {\n  readonly fields = new Array<Field>();\n\n  getField(fieldName: string) {\n    const fields = this.fields.filter(_field => _field.name === fieldName);\n    //assert(fields.length === 1, `Unknown field '${fieldName}'`);\n    return fields.length === 1 ? fields[0] : undefined;\n  }\n\n  addField(fieldName: string) {\n    const fields = this.fields.filter(_field => _field.name === fieldName);\n    assert(\n      fields.length === 0 || fields.length === 1,\n      `Cannot have more than 1 field matching '${fieldName}'`\n    );\n\n    if (fields.length === 0) {\n      const newField = new Field(fieldName);\n      this.fields.push(newField);\n      this.emitSync(FieldEvent.Added, newField);\n    } else {\n      // We can have multiple FieldFeedbacks for the same field,\n      // thus addField() can be called multiple times\n    }\n  }\n\n  removeField(fieldName: string) {\n    // eslint-disable-next-line unicorn/prefer-array-find\n    const fields = this.fields.filter(_field => _field.name === fieldName);\n\n    // We can have multiple FieldFeedbacks for the same field,\n    // thus removeField() can be called multiple times\n    //assert(fields.length === 1, `Unknown field '${fieldName}'`);\n\n    const index = this.fields.indexOf(fields[0]);\n    if (index > -1) {\n      this.fields.splice(index, 1);\n      this.emitSync(FieldEvent.Removed, fieldName);\n    }\n  }\n\n  isValid() {\n    return this.fields.every(field => field.isValid());\n  }\n\n  hasFeedbacks() {\n    return this.fields.some(field => field.hasFeedbacks());\n  }\n}\n"]}
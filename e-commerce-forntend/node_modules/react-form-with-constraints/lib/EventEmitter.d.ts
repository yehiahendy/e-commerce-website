declare type Listener<Args extends any[], ReturnType> = (...args: Args) => ReturnType | Promise<ReturnType>;
export declare class EventEmitter<ListenerArgs extends any[], ListenerReturnType> {
    listeners: Map<string, Listener<ListenerArgs, ListenerReturnType>[]>;
    emitSync(eventName: string, ...args: ListenerArgs): ListenerReturnType[];
    emitAsync(eventName: string, ...args: ListenerArgs): Promise<ListenerReturnType[]>;
    private getListeners;
    addListener(eventName: string, listener: Listener<ListenerArgs, ListenerReturnType>): void;
    removeListener(eventName: string, listener: Listener<ListenerArgs, ListenerReturnType>): void;
}
export {};

{"version":3,"file":"FieldFeedbackWhenValid.js","sourceRoot":"","sources":["../src/FieldFeedbackWhenValid.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,sCAAwC;AAIxC,mDAA8E;AAC9E,6DAA6F;AAgB7F;IAEU,0CAAmD;IAF7D;QAAA,qEA4DC;QAnDC,WAAK,GAAgC;YACnC,YAAY,EAAE,SAAS;SACxB,CAAC;QAgBF,uBAAiB,GAAG,UAAC,SAAiB;YAEpC,IAAI,SAAS,KAAK,KAAI,CAAC,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE;gBACvD,KAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC,CAAC;aAC5C;QACH,CAAC,CAAC;QAEF,sBAAgB,GAAG,UAAC,KAAY;YAE9B,IAAI,KAAK,CAAC,IAAI,KAAK,KAAI,CAAC,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE;gBACxD,KAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;aAClD;QACH,CAAC,CAAC;QAEF,mBAAa,GAAG,UAAC,KAAY;YAE3B,IAAI,KAAK,CAAC,IAAI,KAAK,KAAI,CAAC,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE;gBACxD,KAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC,CAAC;aAC5C;QACH,CAAC,CAAC;;IAcJ,CAAC;IA7CC,kDAAiB,GAAjB;QACE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iCAAiC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC5E,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC1E,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACtE,CAAC;IAED,qDAAoB,GAApB;QACE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,oCAAoC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC/E,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,mCAAmC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC7E,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACzE,CAAC;IAwBD,uCAAM,GAAN;QACE,IAAM,KAA4B,IAAI,CAAC,KAAgD,EAA/E,KAAK,WAAA,EAAK,UAAU,cAAtB,SAAwB,CAAyD,CAAC;QAExF,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAG/B,yCAAU,UAAU,IAAE,KAAK,aAAI,OAAO,EAAE,OAAO,IAAK,KAAK,KAAM,CAChE,CAAC,CAAC,CAAC,IAAI,CAAC;IACX,CAAC;IAtDM,mCAAY,GAAuD;QACxE,IAAI,EAAE,SAAS,CAAC,UAAU,CAAC,yCAAmB,CAAC,CAAC,UAAU;QAC1D,cAAc,EAAE,SAAS,CAAC,UAAU,CAAC,+BAAc,CAAC,CAAC,UAAU;KAChE,CAAC;IAsDJ,6BAAC;CAAA,AA5DD,CAEU,KAAK,CAAC,SAAS,GA0DxB;AA5DY,wDAAsB","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport { Field } from './Field';\nimport { FieldFeedbackClasses } from './FieldFeedback';\nimport { FieldFeedbacks, FieldFeedbacksChildContext } from './FieldFeedbacks';\nimport { FormWithConstraints, FormWithConstraintsChildContext } from './FormWithConstraints';\n\nexport interface FieldFeedbackWhenValidBaseProps {}\n\nexport interface FieldFeedbackWhenValidProps\n  extends FieldFeedbackWhenValidBaseProps,\n    FieldFeedbackClasses,\n    React.HTMLAttributes<HTMLSpanElement> {}\n\ninterface FieldFeedbackWhenValidState {\n  fieldIsValid: boolean | undefined;\n}\n\nexport type FieldFeedbackWhenValidContext = FormWithConstraintsChildContext &\n  FieldFeedbacksChildContext;\n\nexport class FieldFeedbackWhenValid<\n  Props extends FieldFeedbackWhenValidBaseProps = FieldFeedbackWhenValidProps\n> extends React.Component<Props, FieldFeedbackWhenValidState> {\n  static contextTypes: React.ValidationMap<FieldFeedbackWhenValidContext> = {\n    form: PropTypes.instanceOf(FormWithConstraints).isRequired,\n    fieldFeedbacks: PropTypes.instanceOf(FieldFeedbacks).isRequired\n  };\n  context!: FieldFeedbackWhenValidContext;\n\n  state: FieldFeedbackWhenValidState = {\n    fieldIsValid: undefined\n  };\n\n  /* eslint-disable react/destructuring-assignment */\n\n  componentDidMount() {\n    this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.addFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  componentWillUnmount() {\n    this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);\n    this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);\n    this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);\n  }\n\n  fieldWillValidate = (fieldName: string) => {\n    // Ignore the event if it's not for us\n    if (fieldName === this.context.fieldFeedbacks.fieldName) {\n      this.setState({ fieldIsValid: undefined });\n    }\n  };\n\n  fieldDidValidate = (field: Field) => {\n    // Ignore the event if it's not for us\n    if (field.name === this.context.fieldFeedbacks.fieldName) {\n      this.setState({ fieldIsValid: field.isValid() });\n    }\n  };\n\n  fieldDidReset = (field: Field) => {\n    // Ignore the event if it's not for us\n    if (field.name === this.context.fieldFeedbacks.fieldName) {\n      this.setState({ fieldIsValid: undefined });\n    }\n  };\n\n  // Don't forget to update native/FieldFeedbackWhenValid.render()\n  render() {\n    const { style, ...otherProps } = (this.props as unknown) as FieldFeedbackWhenValidProps;\n\n    return this.state.fieldIsValid ? (\n      // <span style=\"display: block\"> instead of <div> so FieldFeedbackWhenValid can be wrapped inside a <p>\n      // otherProps before className because otherProps contains data-feedback\n      <span {...otherProps} style={{ display: 'block', ...style }} />\n    ) : null;\n  }\n\n  /* eslint-enable react/destructuring-assignment */\n}\n"]}
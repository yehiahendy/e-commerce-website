{"ast":null,"code":"import React from 'react';\nimport { API } from './../config';\nimport queryString from 'query-string';\n\nconst getProduct = sortby => {\n  return fetch(`${API}/products?sortBy=${sortby}&order=desc&limit=6`, {\n    method: 'GET'\n  }).then(Response => {\n    return Response.json();\n  }).catch(error => {\n    return error;\n  });\n};\n\nconst getCategory = () => {\n  return fetch(`${API}/category/list`, {\n    method: 'GET'\n  }).then(Response => {\n    return Response.json();\n  }).catch(error => {\n    return error;\n  });\n};\n\nconst getFilterdProducts = (skip, limit, filters = {}) => {\n  const data = {\n    skip,\n    limit,\n    filters\n  };\n  return fetch(`${API}/products/by/search`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(Response => {\n    return Response.json();\n  }).catch(error => {\n    return error;\n  });\n};\n\nconst list = params => {\n  const query = queryString.stringify(params);\n  return fetch(`${API}/products/search?${query}`, {\n    method: 'GET'\n  }).then(Response => {\n    return Response.json();\n  }).catch(error => {\n    return error;\n  });\n};\n\nconst read = productId => {\n  return fetch(`${API}/products/${productId}`, {\n    method: 'GET'\n  }).then(Response => {\n    return Response.json();\n  }).catch(error => {\n    return error;\n  });\n};\n\nexport { getProduct };\nexport { getCategory };\nexport { getFilterdProducts };\nexport { list };\nexport { read };","map":{"version":3,"sources":["D:/Work/Zag System summer Training/e-commerce-website/e-commerce-forntend/src/core/apiCore.jsx"],"names":["React","API","queryString","getProduct","sortby","fetch","method","then","Response","json","catch","error","getCategory","getFilterdProducts","skip","limit","filters","data","headers","body","JSON","stringify","list","params","query","read","productId"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,aAApB;AACA,OAAOC,WAAP,MAAwB,cAAxB;;AACA,MAAMC,UAAU,GAAIC,MAAD,IAAY;AAC3B,SACIC,KAAK,CAAE,GAAEJ,GAAI,oBAAmBG,MAAO,qBAAlC,EAAwD;AAC7DE,IAAAA,MAAM,EAAE;AADqD,GAAxD,CAAL,CAGHC,IAHG,CAGEC,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GALG,EAMHC,KANG,CAMGC,KAAK,IAAI;AACZ,WAAOA,KAAP;AACH,GARG,CADJ;AAWH,CAZD;;AAaA,MAAMC,WAAW,GAAG,MAAM;AACtB,SACIP,KAAK,CAAE,GAAEJ,GAAI,gBAAR,EAAyB;AAC9BK,IAAAA,MAAM,EAAE;AADsB,GAAzB,CAAL,CAGHC,IAHG,CAGEC,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GALG,EAMHC,KANG,CAMGC,KAAK,IAAI;AACZ,WAAOA,KAAP;AACH,GARG,CADJ;AAWH,CAZD;;AAaA,MAAME,kBAAkB,GAAE,CAACC,IAAD,EAAMC,KAAN,EAAYC,OAAO,GAAC,EAApB,KAA2B;AACjD,QAAMC,IAAI,GAAG;AACTH,IAAAA,IADS;AAETC,IAAAA,KAFS;AAGTC,IAAAA;AAHS,GAAb;AAKA,SACIX,KAAK,CAAE,GAAEJ,GAAI,qBAAR,EAA8B;AACnCK,IAAAA,MAAM,EAAE,MAD2B;AAEnCY,IAAAA,OAAO,EACP;AAAE,sBAAgB;AAAlB,KAHmC;AAKnCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf;AAL6B,GAA9B,CAAL,CAOHV,IAPG,CAOEC,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GATG,EAUHC,KAVG,CAUGC,KAAK,IAAI;AACZ,WAAOA,KAAP;AACH,GAZG,CADJ;AAeH,CArBD;;AAsBA,MAAMW,IAAI,GAAIC,MAAD,IAAY;AACrB,QAAMC,KAAK,GAAGtB,WAAW,CAACmB,SAAZ,CAAsBE,MAAtB,CAAd;AACA,SAEIlB,KAAK,CAAE,GAAEJ,GAAI,oBAAmBuB,KAAM,EAAjC,EAAoC;AACzClB,IAAAA,MAAM,EAAE;AADiC,GAApC,CAAL,CAGHC,IAHG,CAGEC,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GALG,EAMHC,KANG,CAMGC,KAAK,IAAI;AACZ,WAAOA,KAAP;AACH,GARG,CAFJ;AAYH,CAdD;;AAeA,MAAMc,IAAI,GAAGC,SAAS,IAAI;AAEtB,SAEIrB,KAAK,CAAE,GAAEJ,GAAI,aAAYyB,SAAU,EAA9B,EAAiC;AACtCpB,IAAAA,MAAM,EAAE;AAD8B,GAAjC,CAAL,CAGHC,IAHG,CAGEC,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GALG,EAMHC,KANG,CAMGC,KAAK,IAAI;AACZ,WAAOA,KAAP;AACH,GARG,CAFJ;AAYH,CAdD;;AAeA,SAAQR,UAAR;AACA,SAAQS,WAAR;AACA,SAAQC,kBAAR;AACA,SAAQS,IAAR;AACA,SAAQG,IAAR","sourcesContent":["import React from 'react';\r\nimport { API } from './../config';\r\nimport queryString from 'query-string';\r\nconst getProduct = (sortby) => {\r\n    return(\r\n        fetch(`${API}/products?sortBy=${sortby}&order=desc&limit=6`, {\r\n        method: 'GET'\r\n    })\r\n    .then(Response => {\r\n        return Response.json();\r\n    })\r\n    .catch(error => {\r\n        return error;\r\n    })\r\n    );\r\n}\r\nconst getCategory = () => {\r\n    return(\r\n        fetch(`${API}/category/list`, {\r\n        method: 'GET'\r\n    })\r\n    .then(Response => {\r\n        return Response.json();\r\n    })\r\n    .catch(error => {\r\n        return error;\r\n    })\r\n    );\r\n} \r\nconst getFilterdProducts= (skip,limit,filters={}) => {\r\n    const data = {\r\n        skip,\r\n        limit,\r\n        filters\r\n    };\r\n    return(\r\n        fetch(`${API}/products/by/search`, {\r\n        method: 'POST',\r\n        headers:\r\n        { 'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n    .then(Response => {\r\n        return Response.json();\r\n    })\r\n    .catch(error => {\r\n        return error;\r\n    })\r\n    );\r\n} \r\nconst list = (params) => {\r\n    const query = queryString.stringify(params)\r\n    return( \r\n        \r\n        fetch(`${API}/products/search?${query}`, {\r\n        method: 'GET'\r\n    })\r\n    .then(Response => {\r\n        return Response.json();\r\n    })\r\n    .catch(error => {\r\n        return error;\r\n    })\r\n    );\r\n}\r\nconst read = productId => {\r\n    \r\n    return( \r\n        \r\n        fetch(`${API}/products/${productId}`, {\r\n        method: 'GET'\r\n    })\r\n    .then(Response => {\r\n        return Response.json();\r\n    })\r\n    .catch(error => {\r\n        return error;\r\n    })\r\n    );\r\n}\r\nexport {getProduct};\r\nexport {getCategory};\r\nexport {getFilterdProducts};\r\nexport {list};\r\nexport {read};"]},"metadata":{},"sourceType":"module"}
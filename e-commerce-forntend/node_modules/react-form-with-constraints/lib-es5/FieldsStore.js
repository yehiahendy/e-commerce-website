"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldsStore = exports.FieldEvent = void 0;
var assert_1 = require("./assert");
var EventEmitter_1 = require("./EventEmitter");
var Field_1 = require("./Field");
var FieldEvent;
(function (FieldEvent) {
    FieldEvent["Added"] = "FIELD_ADDED";
    FieldEvent["Removed"] = "FIELD_REMOVED";
})(FieldEvent = exports.FieldEvent || (exports.FieldEvent = {}));
var FieldsStore = (function (_super) {
    __extends(FieldsStore, _super);
    function FieldsStore() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fields = new Array();
        return _this;
    }
    FieldsStore.prototype.getField = function (fieldName) {
        var fields = this.fields.filter(function (_field) { return _field.name === fieldName; });
        return fields.length === 1 ? fields[0] : undefined;
    };
    FieldsStore.prototype.addField = function (fieldName) {
        var fields = this.fields.filter(function (_field) { return _field.name === fieldName; });
        assert_1.assert(fields.length === 0 || fields.length === 1, "Cannot have more than 1 field matching '" + fieldName + "'");
        if (fields.length === 0) {
            var newField = new Field_1.Field(fieldName);
            this.fields.push(newField);
            this.emitSync(FieldEvent.Added, newField);
        }
        else {
        }
    };
    FieldsStore.prototype.removeField = function (fieldName) {
        var fields = this.fields.filter(function (_field) { return _field.name === fieldName; });
        var index = this.fields.indexOf(fields[0]);
        if (index > -1) {
            this.fields.splice(index, 1);
            this.emitSync(FieldEvent.Removed, fieldName);
        }
    };
    FieldsStore.prototype.isValid = function () {
        return this.fields.every(function (field) { return field.isValid(); });
    };
    FieldsStore.prototype.hasFeedbacks = function () {
        return this.fields.some(function (field) { return field.hasFeedbacks(); });
    };
    return FieldsStore;
}(EventEmitter_1.EventEmitter));
exports.FieldsStore = FieldsStore;
//# sourceMappingURL=FieldsStore.js.map
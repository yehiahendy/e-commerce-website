{"version":3,"file":"FieldsStore.js","sourceRoot":"","sources":["../src/FieldsStore.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,mCAAkC;AAClC,+CAA8C;AAC9C,iCAAgC;AAEhC,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,mCAAqB,CAAA;IACrB,uCAAyB,CAAA;AAC3B,CAAC,EAHW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAGrB;AAED;IAAiC,+BAAoC;IAArE;QAAA,qEAgDC;QA/CU,YAAM,GAAG,IAAI,KAAK,EAAS,CAAC;;IA+CvC,CAAC;IA7CC,8BAAQ,GAAR,UAAS,SAAiB;QACxB,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,SAAS,EAAzB,CAAyB,CAAC,CAAC;QAEvE,OAAO,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACrD,CAAC;IAED,8BAAQ,GAAR,UAAS,SAAiB;QACxB,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,SAAS,EAAzB,CAAyB,CAAC,CAAC;QACvE,eAAM,CACJ,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAC1C,6CAA2C,SAAS,MAAG,CACxD,CAAC;QAEF,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,IAAM,QAAQ,GAAG,IAAI,aAAK,CAAC,SAAS,CAAC,CAAC;YACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC3B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;SAC3C;aAAM;SAGN;IACH,CAAC;IAED,iCAAW,GAAX,UAAY,SAAiB;QAE3B,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,SAAS,EAAzB,CAAyB,CAAC,CAAC;QAMvE,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;YACd,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;SAC9C;IACH,CAAC;IAED,6BAAO,GAAP;QACE,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,OAAO,EAAE,EAAf,CAAe,CAAC,CAAC;IACrD,CAAC;IAED,kCAAY,GAAZ;QACE,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,YAAY,EAAE,EAApB,CAAoB,CAAC,CAAC;IACzD,CAAC;IACH,kBAAC;AAAD,CAAC,AAhDD,CAAiC,2BAAY,GAgD5C;AAhDY,kCAAW","sourcesContent":["import { assert } from './assert';\nimport { EventEmitter } from './EventEmitter';\nimport { Field } from './Field';\n\nexport enum FieldEvent {\n  Added = 'FIELD_ADDED',\n  Removed = 'FIELD_REMOVED'\n}\n\nexport class FieldsStore extends EventEmitter<[Field | string], void> {\n  readonly fields = new Array<Field>();\n\n  getField(fieldName: string) {\n    const fields = this.fields.filter(_field => _field.name === fieldName);\n    //assert(fields.length === 1, `Unknown field '${fieldName}'`);\n    return fields.length === 1 ? fields[0] : undefined;\n  }\n\n  addField(fieldName: string) {\n    const fields = this.fields.filter(_field => _field.name === fieldName);\n    assert(\n      fields.length === 0 || fields.length === 1,\n      `Cannot have more than 1 field matching '${fieldName}'`\n    );\n\n    if (fields.length === 0) {\n      const newField = new Field(fieldName);\n      this.fields.push(newField);\n      this.emitSync(FieldEvent.Added, newField);\n    } else {\n      // We can have multiple FieldFeedbacks for the same field,\n      // thus addField() can be called multiple times\n    }\n  }\n\n  removeField(fieldName: string) {\n    // eslint-disable-next-line unicorn/prefer-array-find\n    const fields = this.fields.filter(_field => _field.name === fieldName);\n\n    // We can have multiple FieldFeedbacks for the same field,\n    // thus removeField() can be called multiple times\n    //assert(fields.length === 1, `Unknown field '${fieldName}'`);\n\n    const index = this.fields.indexOf(fields[0]);\n    if (index > -1) {\n      this.fields.splice(index, 1);\n      this.emitSync(FieldEvent.Removed, fieldName);\n    }\n  }\n\n  isValid() {\n    return this.fields.every(field => field.isValid());\n  }\n\n  hasFeedbacks() {\n    return this.fields.some(field => field.hasFeedbacks());\n  }\n}\n"]}
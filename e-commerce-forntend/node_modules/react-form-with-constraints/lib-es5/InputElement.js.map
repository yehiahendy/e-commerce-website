{"version":3,"file":"InputElement.js","sourceRoot":"","sources":["../src/InputElement.ts"],"names":[],"mappings":";;;AAaA;IAaE,wBAAY,QAAuB;QACjC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAClC,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QACxC,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAC;QAChD,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC;QAC5C,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC;QAC9C,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;QAC1C,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAClC,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;QAC1C,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QAC5B,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;IAC5C,CAAC;IACH,qBAAC;AAAD,CAAC,AA1BD,IA0BC;AA1BY,wCAAc;AA6C3B,SAAgB,WAAW,CAAC,KAA6B;IACvD,OAAQ,KAAa,CAAC,KAAK,KAAK,SAAS,CAAC;AAC5C,CAAC;AAFD,kCAEC;AAKD;IAOE,sBAAY,KAA6B;QACvC,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;YACtB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;YACvB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;YACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;YASzB,IAAI,CAAC,QAAQ,GAAG,IAAI,cAAc,CAAC,KAAK,CAAC,QAAyB,CAAC,CAAC;YAEpE,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC,iBAAiB,CAAC;SAClD;aAAM;YACL,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;YAC7B,IAAI,CAAC,IAAI,GAAG,SAAgB,CAAC;YAC7B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,KAAM,CAAC;YAChC,IAAI,CAAC,QAAQ,GAAG,SAAgB,CAAC;YACjC,IAAI,CAAC,iBAAiB,GAAG,SAAgB,CAAC;SAC3C;IACH,CAAC;IACH,mBAAC;AAAD,CAAC,AA/BD,IA+BC;AA/BY,oCAAY","sourcesContent":["// [React Native TextInput](https://facebook.github.io/react-native/docs/textinput.html)\n// Here so we don't have to \"import { TextInput } from 'react-native'\" and depend on React Native\nexport interface TextInput {\n  //value?: string; // Always undefined, use instead props.value\n  props: {\n    name: string;\n    value?: string;\n  };\n}\n\n// Cannot clone ValidityState using JSON.parse(JSON.stringify(input.validity)),\n// results in an empty object ({}) under Chrome 66, Firefox 60 and Safari 10.1.2\n// so let's manually clone it.\nexport class IValidityState implements ValidityState {\n  readonly badInput: boolean;\n  readonly customError: boolean;\n  readonly patternMismatch: boolean;\n  readonly rangeOverflow: boolean;\n  readonly rangeUnderflow: boolean;\n  readonly stepMismatch: boolean;\n  readonly tooLong: boolean;\n  readonly tooShort: boolean;\n  readonly typeMismatch: boolean;\n  readonly valid: boolean;\n  readonly valueMissing: boolean;\n\n  constructor(validity: ValidityState) {\n    this.badInput = validity.badInput;\n    this.customError = validity.customError;\n    this.patternMismatch = validity.patternMismatch;\n    this.rangeOverflow = validity.rangeOverflow;\n    this.rangeUnderflow = validity.rangeUnderflow;\n    this.stepMismatch = validity.stepMismatch;\n    this.tooLong = validity.tooLong;\n    this.tooShort = validity.tooShort;\n    this.typeMismatch = validity.typeMismatch;\n    this.valid = validity.valid;\n    this.valueMissing = validity.valueMissing;\n  }\n}\n\n// Type for Field.element\nexport type HTMLInput = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n\n// Minimum interface accepted by validateFields() and friends\nexport interface IHTMLInput {\n  readonly name: string;\n  readonly type: string; // Not needed internally, can be text, radio...\n  readonly value: string;\n\n  // validity and validationMessage available for (lib.dom.d.ts):\n  // HTMLButtonElement, HTMLFieldSetElement, HTMLInputElement, HTMLObjectElement,\n  // HTMLOutputElement, HTMLSelectElement, HTMLTextAreaElement\n  // ValidityState is supported by IE >= 10\n  readonly validity: IValidityState;\n  readonly validationMessage: string;\n}\n\nexport function isHTMLInput(input: IHTMLInput | TextInput): input is IHTMLInput {\n  return (input as any).props === undefined;\n}\n\n// Need to duplicate the input when the user changes rapidly the input\n// otherwise we will treat only the last input value instead of every input value change\n// Cannot be named Field or Input: already taken\nexport class InputElement implements IHTMLInput {\n  readonly name: string;\n  readonly type: string;\n  readonly value: string;\n  readonly validity: IValidityState;\n  readonly validationMessage: string;\n\n  constructor(input: IHTMLInput | TextInput) {\n    if (isHTMLInput(input)) {\n      this.name = input.name;\n      this.type = input.type;\n      this.value = input.value;\n\n      // Solution 1: no clone, then .mock.calls never ends with ValidityState inside FormWithConstraints.test.tsx in v0.8\n      //this.validity = input.validity;\n\n      // Solution 2: JSON does not work to clone ValidityState (results in an empty object)\n      //this.validity = JSON.parse(JSON.stringify(input.validity));\n\n      // Solution 3: manually clone ValidityState\n      this.validity = new IValidityState(input.validity as ValidityState);\n\n      this.validationMessage = input.validationMessage;\n    } else {\n      this.name = input.props.name;\n      this.type = undefined as any;\n      this.value = input.props.value!; // Tested: TextInput props.value is always a string and never undefined (empty string instead)\n      this.validity = undefined as any;\n      this.validationMessage = undefined as any;\n    }\n  }\n}\n"]}
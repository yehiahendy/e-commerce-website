{"version":3,"file":"FormWithConstraints.js","sourceRoot":"","sources":["../src/FormWithConstraints.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport { assert } from './assert';\nimport { Field } from './Field';\nimport { FieldFeedbackValidation } from './FieldFeedbackValidation';\nimport { FieldsStore } from './FieldsStore';\nimport { HTMLInput, IHTMLInput, InputElement, TextInput } from './InputElement';\nimport { notUndefined } from './notUndefined';\nimport { withFieldDidResetEventEmitter } from './withFieldDidResetEventEmitter';\nimport { withFieldDidValidateEventEmitter } from './withFieldDidValidateEventEmitter';\nimport { withFieldWillValidateEventEmitter } from './withFieldWillValidateEventEmitter';\nimport { withValidateFieldEventEmitter } from './withValidateFieldEventEmitter';\n\nexport interface FormWithConstraintsChildContext {\n  form: FormWithConstraints;\n}\n\nexport interface FormWithConstraintsProps extends React.FormHTMLAttributes<HTMLFormElement> {}\n\nclass FormWithConstraintsComponent extends React.PureComponent<FormWithConstraintsProps> {}\nexport class FormWithConstraints\n  extends withFieldDidResetEventEmitter(\n    withFieldWillValidateEventEmitter(\n      withFieldDidValidateEventEmitter(\n        withValidateFieldEventEmitter<\n          // FieldFeedback returns FieldFeedbackValidation\n          // Async returns FieldFeedbackValidation[] | undefined\n          // FieldFeedbacks returns (FieldFeedbackValidation | undefined)[] | undefined\n          FieldFeedbackValidation | (FieldFeedbackValidation | undefined)[] | undefined,\n          typeof FormWithConstraintsComponent\n        >(FormWithConstraintsComponent)\n      )\n    )\n  )\n  implements React.ChildContextProvider<FormWithConstraintsChildContext> {\n  static childContextTypes: React.ValidationMap<FormWithConstraintsChildContext> = {\n    form: PropTypes.instanceOf(FormWithConstraints).isRequired\n  };\n  getChildContext(): FormWithConstraintsChildContext {\n    return {\n      form: this\n    };\n  }\n\n  // Could be named innerRef instead, https://github.com/ant-design/ant-design/issues/5489#issuecomment-332208652\n  private form: HTMLFormElement | null = null;\n\n  fieldsStore = new FieldsStore();\n\n  private fieldFeedbacksKeyCounter = 0;\n  computeFieldFeedbacksKey() {\n    return `${this.fieldFeedbacksKeyCounter++}`;\n  }\n\n  /**\n   * Validates the given fields, either HTMLInputElements or field names.\n   * If called without arguments, validates all fields ($('[name]')).\n   */\n  validateFields(...inputsOrNames: Array<IHTMLInput | string>) {\n    return this._validateFields(/* forceValidateFields */ true, ...inputsOrNames);\n  }\n\n  // TODO To be removed in the future?\n  validateForm() {\n    return this.validateFieldsWithoutFeedback();\n  }\n\n  /**\n   * Validates fields without feedback only.\n   */\n  validateFieldsWithoutFeedback(...inputsOrNames: Array<IHTMLInput | string>) {\n    return this._validateFields(/* forceValidateFields */ false, ...inputsOrNames);\n  }\n\n  private async _validateFields(\n    forceValidateFields: boolean,\n    ...inputsOrNames: Array<IHTMLInput | string>\n  ) {\n    const fields = new Array<Readonly<Field>>();\n\n    const inputs = this.normalizeInputs(...inputsOrNames);\n\n    for (let i = 0; i < inputs.length; i++) {\n      const input = inputs[i];\n      // eslint-disable-next-line no-await-in-loop\n      const field = await this.validateField(\n        forceValidateFields,\n        new InputElement(input),\n        input as HTMLInput | TextInput\n      );\n      if (field !== undefined) fields.push(field);\n    }\n\n    return fields;\n  }\n\n  private async validateField(\n    forceValidateFields: boolean,\n    input: InputElement,\n\n    // We need to pass the native input separately instead of it being a property of InputElement\n    // otherwise react-form-with-constraints-native unit tests will crash\n    nativeInput: HTMLInput | TextInput\n  ) {\n    const fieldName = input.name;\n    const field = this.fieldsStore.getField(fieldName);\n\n    if (field === undefined) {\n      // Means the field (<input name=\"username\">) does not have a FieldFeedbacks\n      // so let's ignore this field\n    } else if (forceValidateFields || !field.hasFeedbacks()) {\n      field.element = nativeInput as HTMLInput | TextInput;\n      field.clearValidations();\n\n      this.emitFieldWillValidateEvent(fieldName);\n\n      const arrayOfArrays = await this.emitValidateFieldEvent(input);\n\n      // Internal check that everything is OK\n      // Can be temporary out of sync if the user rapidly change the input, in this case:\n      // emitFieldWillValidateEvent() returns the result of the first change while the store already contains the final validations\n      assert(\n        JSON.stringify(\n          (arrayOfArrays.flat(Infinity) as (\n            | FieldFeedbackValidation\n            | undefined\n          )[]).filter(fieldFeedback => notUndefined(fieldFeedback))\n        ) /* validationsFromEmitValidateFieldEvent */ ===\n          JSON.stringify(field.validations) /* validationsFromStore */,\n        `FieldsStore does not match emitValidateFieldEvent() result, did the user changed the input rapidly?`\n      );\n\n      this.emitFieldDidValidateEvent(field);\n    }\n\n    return field;\n  }\n\n  // If called without arguments, returns all fields ($('[name]'))\n  // Returns the inputs in the same order they were given\n  protected normalizeInputs(...inputsOrNames: Array<IHTMLInput | string>) {\n    let inputs;\n\n    if (inputsOrNames.length === 0) {\n      // [name] matches <input name=\"...\">, <select name=\"...\">, <button name=\"...\">, ...\n      // [Convert JavaScript NodeList to Array?](https://stackoverflow.com/a/33822526/990356)\n      // [...NodeList] vs Array.from(NodeList): the latter doesn't need downlevelIteration with IE\n      // eslint-disable-next-line unicorn/prefer-spread\n      inputs = Array.from(this.form!.querySelectorAll<HTMLInputElement>('[name]'));\n\n      // Remove elements without ValidityState, example:\n      // <iframe src=\"https://www.google.com/recaptcha...\" name=\"a-49ekipqfmwsv\">\n      // Without this check, possible crash inside InputElement is \"TypeError: Cannot read property 'badInput' of undefined\"\n      //\n      // ValidityState is available for (lib.dom.d.ts):\n      // HTMLButtonElement, HTMLFieldSetElement, HTMLInputElement, HTMLObjectElement,\n      // HTMLOutputElement, HTMLSelectElement, HTMLTextAreaElement\n      //\n      // ValidityState is supported by IE >= 10\n      inputs = inputs.filter(input => input.validity !== undefined);\n\n      // Check we have unique names\n      inputs\n        .filter(input => input.type !== 'checkbox' && input.type !== 'radio')\n        .map(input => input.name)\n        .forEach((name, index, self) => {\n          if (self.indexOf(name) !== index) {\n            throw new Error(`Multiple elements matching '[name=\"${name}\"]' inside the form`);\n          }\n        });\n    } else {\n      inputs = inputsOrNames.map(input => {\n        if (typeof input === 'string') {\n          const query = `[name=\"${input}\"]`;\n\n          // [...NodeList] vs Array.from(NodeList): the latter doesn't need downlevelIteration with IE\n          // eslint-disable-next-line unicorn/prefer-spread\n          const elements = Array.from(this.form!.querySelectorAll<HTMLInputElement>(query));\n\n          // Checks\n\n          if (elements.filter(el => el.validity === undefined).length > 0) {\n            // Should not match something like\n            // <iframe src=\"https://www.google.com/recaptcha...\" name=\"a-49ekipqfmwsv\">\n            throw new Error(`'${query}' should match an <input>, <select> or <textarea>`);\n          }\n          if (elements.filter(el => el.type !== 'checkbox' && el.type !== 'radio').length > 1) {\n            throw new Error(`Multiple elements matching '${query}' inside the form`);\n          }\n          const element = elements[0];\n          if (element === undefined) {\n            throw new Error(`Could not find field '${query}' inside the form`);\n          }\n\n          return element;\n        }\n\n        return input;\n      });\n    }\n\n    return inputs;\n  }\n\n  // More like seemsToBeValid(): return true if fields are untouched\n  isValid() {\n    return this.fieldsStore.isValid();\n  }\n\n  hasFeedbacks() {\n    return this.fieldsStore.hasFeedbacks();\n  }\n\n  // TODO To be removed in the future?\n  reset() {\n    return this.resetFields();\n  }\n\n  resetFields(...inputsOrNames: Array<IHTMLInput | string>) {\n    const fields = new Array<Readonly<Field>>();\n\n    const inputs = this.normalizeInputs(...inputsOrNames);\n    inputs.forEach(input => {\n      const field = this.resetField(new InputElement(input));\n      if (field !== undefined) fields.push(field);\n    });\n\n    return fields;\n  }\n\n  private resetField(input: InputElement) {\n    const fieldName = input.name;\n    const field = this.fieldsStore.getField(fieldName);\n\n    if (field === undefined) {\n      // Means the field (<input name=\"username\">) does not have a FieldFeedbacks\n      // so let's ignore this field\n    } else {\n      field.clearValidations();\n      this.emitFieldDidResetEvent(field);\n    }\n\n    return field;\n  }\n\n  render() {\n    return <form ref={form => (this.form = form)} {...this.props} />;\n  }\n}\n"]}
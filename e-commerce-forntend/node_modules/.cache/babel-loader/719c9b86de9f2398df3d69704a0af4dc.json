{"ast":null,"code":"import React from 'react';\nimport { API } from './../config';\nimport queryString from 'query-string';\n\nconst getProduct = sortby => {\n  return fetch(`${API}/products?sortBy=${sortby}&order=desc&limit=6`, {\n    method: 'GET'\n  }).then(Response => {\n    return Response.json();\n  }).catch(error => {\n    return error;\n  });\n};\n\nconst getCategory = () => {\n  return fetch(`${API}/category/list`, {\n    method: 'GET'\n  }).then(Response => {\n    return Response.json();\n  }).catch(error => {\n    return error;\n  });\n};\n\nconst getFilterdProducts = (skip, limit, filters = {}) => {\n  const data = {\n    skip,\n    limit,\n    filters\n  };\n  return fetch(`${API}/products/by/search`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(Response => {\n    return Response.json();\n  }).catch(error => {\n    return error;\n  });\n};\n\nconst list = params => {\n  const query = queryString.stringify(params);\n  return fetch(`${API}/products/search?${query}`, {\n    method: 'GET'\n  }).then(Response => {\n    return Response.json();\n  }).catch(error => {\n    return error;\n  });\n};\n\nconst read = productId => {\n  return fetch(`${API}/product/${productId}`, {\n    method: 'GET'\n  }).then(Response => {\n    return Response.json();\n  }).catch(error => {\n    return error;\n  });\n};\n\nconst listRelatedProducts = productId => {\n  return fetch(`${API}/products/relate/${productId}`, {\n    method: 'GET'\n  }).then(Response => {\n    return Response.json();\n  }).catch(error => {\n    return error;\n  });\n};\n\nconst getBraintreeClientToken = (userId, token) => {\n  return fetch(`${API}/braintree/gettoken/${userId}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(Response => {\n    return Response.json();\n  }).catch(error => {\n    return error;\n  });\n};\n\nexport const processPayment = (userId, token, paymentData) => {\n  return fetch(`${API}/braintree/payment/${userId}`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(paymentData)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const createOrder = (userId, token, createOrderData) => {\n  return fetch(`${API}/order/create/${userId}`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      order: createOrderData\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport { getProduct };\nexport { getBraintreeClientToken };\nexport { getCategory };\nexport { getFilterdProducts };\nexport { list };\nexport { read };\nexport { listRelatedProducts };","map":{"version":3,"sources":["D:/Work/Zag System summer Training/e-commerce-website/e-commerce-forntend/src/core/apiCore.jsx"],"names":["React","API","queryString","getProduct","sortby","fetch","method","then","Response","json","catch","error","getCategory","getFilterdProducts","skip","limit","filters","data","headers","body","JSON","stringify","list","params","query","read","productId","listRelatedProducts","getBraintreeClientToken","userId","token","Authorization","processPayment","paymentData","Accept","response","err","console","log","createOrder","createOrderData","order"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { API } from './../config';\r\nimport queryString from 'query-string';\r\nconst getProduct = (sortby) => {\r\n    return(\r\n        fetch(`${API}/products?sortBy=${sortby}&order=desc&limit=6`, {\r\n        method: 'GET'\r\n    })\r\n    .then(Response => {\r\n        return Response.json();\r\n    })\r\n    .catch(error => {\r\n        return error;\r\n    })\r\n    );\r\n}\r\nconst getCategory = () => {\r\n    return(\r\n        fetch(`${API}/category/list`, {\r\n        method: 'GET'\r\n    })\r\n    .then(Response => {\r\n        return Response.json();\r\n    })\r\n    .catch(error => {\r\n        return error;\r\n    })\r\n    );\r\n} \r\nconst getFilterdProducts= (skip,limit,filters={}) => {\r\n    const data = {\r\n        skip,\r\n        limit,\r\n        filters\r\n    };\r\n    return(\r\n        fetch(`${API}/products/by/search`, {\r\n        method: 'POST',\r\n        headers:\r\n        { 'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n    .then(Response => {\r\n        return Response.json();\r\n    })\r\n    .catch(error => {\r\n        return error;\r\n    })\r\n    );\r\n} \r\nconst list = (params) => {\r\n    const query = queryString.stringify(params)\r\n    return( \r\n        \r\n        fetch(`${API}/products/search?${query}`, {\r\n        method: 'GET'\r\n    })\r\n    .then(Response => {\r\n        return Response.json();\r\n    })\r\n    .catch(error => {\r\n        return error;\r\n    })\r\n    );\r\n}\r\nconst read = productId => {\r\n    \r\n    return( \r\n        \r\n        fetch(`${API}/product/${productId}`, {\r\n        method: 'GET'\r\n    })\r\n    .then(Response => {\r\n        return Response.json();\r\n    })\r\n    .catch(error => {\r\n        return error;\r\n    })\r\n    );\r\n}\r\nconst listRelatedProducts = productId => {\r\n    \r\n    return( \r\n        \r\n        fetch(`${API}/products/relate/${productId}`, {\r\n        method: 'GET'\r\n    })\r\n    .then(Response => {\r\n        return Response.json();\r\n    })\r\n    .catch(error => {\r\n        return error;\r\n    })\r\n    );\r\n}\r\nconst getBraintreeClientToken = (userId,token) => {\r\n    return(\r\n        fetch(`${API}/braintree/gettoken/${userId}`, {\r\n        method: 'GET',\r\n        headers:\r\n        { 'Content-Type': 'application/json',\r\n            Authorization : `Bearer ${token}`\r\n        },\r\n    })\r\n    .then(Response => {\r\n        return Response.json();\r\n    })\r\n    .catch(error => {\r\n        return error;\r\n    })\r\n    );\r\n} \r\nexport const processPayment = (userId, token, paymentData) => {\r\n    return fetch(`${API}/braintree/payment/${userId}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(paymentData)\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const createOrder = (userId, token, createOrderData) => {\r\n    return fetch(`${API}/order/create/${userId}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({ order: createOrderData })\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\nexport {getProduct};\r\nexport {getBraintreeClientToken};\r\nexport {getCategory};\r\nexport {getFilterdProducts};\r\nexport {list};\r\nexport {read};\r\nexport {listRelatedProducts};\r\n"]},"metadata":{},"sourceType":"module"}